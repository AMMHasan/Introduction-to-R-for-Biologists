[["index.html", "Introduction to R for Biologists Chapter 1 Introduction 1.1 Definition 1.2 Mini history 1.3 Installing R and RStudio", " Introduction to R for Biologists Dr A M Mahedi Hasan (a.m.m.hasan@ucl.ac.uk) March 06, 2023 Chapter 1 Introduction This workshop is designed for the Cancer MSc Students in UCL Cancer Institute to introduce R (statistical-) programming language. I would appreciate if you participate in this pre-course survey so that I have an overview of the participants and tailor the lecture accordingly. Now, I will briefly touch on the history of R. 1.1 Definition “R is a programming language for statistical computing and graphics supported by the R Core Team and the R Foundation for Statistical Computing.” - Wikipedia 1.2 Mini history R is an open-source implementation of the S programming language, which was designed for statistical analysis. S was created by Rick Becker, John Chambers, Doug Dunn, Jean McRae, and Judy Schilling at Bell Labs around 1976. In 1991, statisticians Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, started on an implementation of S which had become the R programming language over time. In 1995, statistician Martin Mächler convinced them to make R a free and open-source software. The first official release came in June 1995, and the first official “stable beta” version (v1.0) was released on 29 February 2000. R is supported by a huge community level contribution as it is open source. 1.3 Installing R and RStudio We will be using RStudio, which is an Integrated Development Environment (IDE) of R. To my view, it is very handy working in RStudio environment, rather than using simply R. However, to use RStudio, we’ll need to install the Base-R first, and then RStudio software. Base-R is the basic software which contains the R programming language. Desktop version of both software are totally free and open source. 1.3.1 Installing R 1.3.1.1 For Mac users Open an internet browser and go to https://cran.r-project.org Click on the “Download R for MacOS” link at the top of the page. Click on an appropriate link under Latest releases (as of today, the latest version is R 4.2.0.pkg). Save the .pkg file, double-click it to open, and follow the installation instructions. Now that R is installed, you need to download and install RStudio. 1.3.1.2 For Windows users Open an internet browser and go to https://cran.r-project.org Click the “download R for Windows” link under “Download and Install R” box. Click on the base version. Click on the latest version of R for Windows (as if for this tutorial, the latest version is Download R-4.2.0 for Windows (79 megabytes, 64 bit)). Save the .exe file on your computer. Double-click on the .exe file, and follow the default installation instructions. Please do not install R on your network drive, it will make your life difficult. Now that R is installed, you need to download and install RStudio. 1.3.1.3 For Linux (Ubuntu distribution) users For most of the versions of Linux, R should already be installed. However, if you want to install it manually, this is the code - sudo apt-get install r-base r-base-dev 1.3.2 Installing RStudio 1.3.2.1 For Mac users Go to https://www.rstudio.com and click on the “Download” tab on the top Click on “Download” button under RStudio Desktop. Click on the version recommended for your system (i.e. the latest Mac version), save the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder. 1.3.2.2 For Windows users Go to https://www.rstudio.com and click on the “Download” tab on the top Click on RStudio Desktop and it will bring down to the free Open Source Edition option. Click on the DOWNLOAD RSTUDIO DESKTOP button Now from the Download the RStudio IDE, click on the Download button. Now click on the latest version of RStudio - DOWNLOAD RSTUDIO FOR WINDOWS button, save the .exe file on your computer, double-click it to open, and then follow the default settings to install on your computer. 1.3.2.3 For Linux users Go to https://www.rstudio.com Choose the right package and download for your system Open the file in Ubuntu Software Centre Click install and follow the set of instruction 1.3.2.4 RStudio Cloud If you have further problem installing R on you computer, do not worry. You can log on to the RStudio Cloud. Simply - google for RStudio Cloud or go to https://rstudio.cloud/. Sign up and log in (you can do it with you google or github profile) From the New Project button on the top-right, select for New Rstudio Project. Now you will have a RStudio interface with 1 CPU and 1 GB of RAM which is sufficient for our workshop. "],["who-am-i.html", "Chapter 2 Who am I?", " Chapter 2 Who am I? A M Mahedi Hasan, MRSB | AF-HEA Post-doctoral Research Associate (Computational Biology) Treatment Resistance Group UCL Cancer Institute 2nd Floor, Paul O’Gorman Building 72 Huntley Street, London WC1E 6DD "],["get-to-know-rstudio-interface.html", "Chapter 3 Get to know RStudio interface 3.1 RStudio Windows/Panels", " Chapter 3 Get to know RStudio interface RStudio is an integrated development environment (IDE) for R. 3.1 RStudio Windows/Panels Upon openning RStudio, you may see three windows or panels. However, it can be extended to four with the source panel opened (File &gt; New File &gt; R Script). You can reorder the windows / panels as your wish. 3.1.1 Source window The source panel is where you create and edit your collection of codes in i.e. R Scripts. This is your script editor. You can save it in “.R” extension and reuse your codes later (even in the case of sudden crush of your computer). As you type in your codes, make a habit of saving the codes (command + S for Mac OS or Ctrl + S for Windows OS) as you do with most of the text editors. However, you have to run the codes through the Console (coming next in the discussion). You can run the whole page of codes or a snippet of code(s) from the source panel. There are few ways to run your codes from the Source panel through the Console. This could be with copy your codes and then paste on the Console and then hit enter. Or, selectitng the code snippet that you wish to execute and clicking on the “Run” button on the top of the Source window. Alternatively, you can use the short-cut “Command + Enter” on Mac, or “Ctrl + Enter” on Windows OS. 3.1.2 Environment / History (Connections / Build / Git etc) This panel contains several tabs and the number depends on whether you have installed/ loaded one or few packages. I will touch on only the Environment and the History tabs. The Environment tab of this panel shows you all the data objects (like vectors, dataframes etc) that you’ve created during the current R session . You can even double click on a loaded dataset on Environment tab and view in the Source panel, however, I won’t recommend this if the dataset is relatively sizable. The little broom on the top resets your environment and deletes the variables or data. The History tab keeps the commands that you used and can be reused by double click to execute, or shift + double click moves to the Source editor (R Script). 3.1.3 Console One can treat the Console Panel as the heart of RStudio. This is the default window in Base-R. You actually executes your R commands here. The Console works as a prompt like a terminal in UNIX OS and let you check your codes interactively. However, don’t be confused by this analogy as there is a dedicated Terminal tab alongside the Console tab in this window/panel. Keep in mind that, when you turn off the RStudio, the Console deletes all the codes that you have executed in the current R session and when you reopen it, you start with a fresh Console. 3.1.4 Files / Plots / Packages / Help I will go through these four tabs in this panel. However, sometimes you may have an aditional tab called Viewer. Files - Files tab showes you where you are and what are the contents of the directory, which is equivalent to folder in Windows OS. You can also see the path of the project directory on the top. Let’s set your current directory - setwd(&quot;/Users/mahedi/Documents/Collaborations/UCL_CI/Introduction-to-R-for-Biologists&quot;) Plots - This tab shows the plots that you generate. One cool and handy feature of RStudio is to have it integrated. You can go back and forth between plots using left and right arrow keys. Small broom resets your plots panel and deletes from the memory. You can either copy your plot to the clipboard or export as .jpeg or .pdf file. hist(rnorm(1000), main = &quot;Histogram of 1000 random numbers&quot;) Packages - R packages are bundles of functions generated by R users and released for others to use for free. Sometimes light weight data are embedded within. This list contains all the packages that are downloaded in this computer (or have come as base packages with R). The loaded packages are the ones with tick marks (checked). FYI, there are more than 19000 packages in CRAN (The Comprehensive R Archive Network), more than 2000 packages in Bioconductor. Packages can be installed/ loaded in R environment in a number of ways, we will do it in the so-called conventional way. The function to install a package from the CRAN repository is install.packages(\"package_name\"). From Bioconductor, installing package is a bit different, we will cover that part some other day. However, this will not load the package in to the R environment yet, rather you may think it has been downloaded on your computer. Now to load it to your current R session, type in library(package_name). Remember, this time the single/double quotation around the package_name is not necessary. Help - Help tab provides the information regarding functions - detailed descriptions, usage, arguments etc. This utility can be summoned using the search box or by typing ?function_name in the Console. "],["data-types-and-data-structures.html", "Chapter 4 Data types and data structures 4.1 Useful data types in R 4.2 Data structure 4.3 Import and export data 4.4 Manipulating data", " Chapter 4 Data types and data structures In this chapter, we will cover the following topics - Data type Numbers Characters Logical Data structure Vector Matrix Array Data frame List Import and export data .csv .xlsx Manipulating data 4.1 Useful data types in R There are different data types used in R. We will touch upon a few, but heavily used, data types in this chapter. These are namely - 4.1.1 Numbers: Numbers can be Integers, or can be floating numbers (decimal numbers). They are recognized as simple Numeric data type in R. 4.1.2 Character: This type of data can be equivalent to categorical variable. In other programming language, this is equivalent to String or Text data type. Here in R, these can be nominal (just names) or ordinal (names with hidden order) variables. 4.1.3 Logical: such as True or False. These can be the result of a boolean operation. Let’s see an example of different data types - participant.ID Date weight.in.kg height.in.cm smoker Overall.health.condition BMI1_001 01/11/2021 55.5 172 No Intermediate BMI1_002 02/11/2021 45.0 165 Yes Good BMI1_003 03/11/2021 75.0 150 No Poor Here in the table above, participant.ID, smoker, Overall.health.condition columns represent character data type. Of them, participant.ID and smoker columns contain nominal data, while the Overall.health.condition represents the ordinal data type. The columns namely weight.in.kg and height.in.cm contain numeric data type. A very very important information - Categorical data (nominal or ordinal) in R are also called Factors. Overall.health.condition &lt;- factor(c(&quot;Intermediate&quot;, &quot;Good&quot;, &quot;Poor&quot;, &quot;Good&quot;, &quot;Poor&quot; )) Overall.health.condition #~~~~~~~~~~~~~~~~~~~~ Overall.health.condition &lt;- factor(c(&quot;Intermediate&quot;, &quot;Good&quot;, &quot;Poor&quot;, &quot;Good&quot;, &quot;Poor&quot;), ordered = F) Overall.health.condition #~~~~~~~~~~~~~~~~~~~~ Overall.health.condition &lt;- factor(c(&quot;Intermediate&quot;, &quot;Good&quot;, &quot;Poor&quot;, &quot;Good&quot;, &quot;Poor&quot;), ordered = T) Overall.health.condition #~~~~~~~~~~~~~~~~~~~~ Overall.health.condition &lt;- factor(c(&quot;Intermediate&quot;, &quot;Good&quot;, &quot;Poor&quot;, &quot;Good&quot;, &quot;Poor&quot;), ordered = T, levels = c(&quot;Poor&quot;, &quot;Intermediate&quot;, &quot;Good&quot;)) Overall.health.condition There are also complex data types, date data types etc, which we will not cover in this workshop. 4.2 Data structure There are few useful pre-defined data structures that are heavily used in R. There are user defined data structures as well (there are no limits in this case). We will discuss a few of the former class - 4.2.1 Vector: Let’s first think of a variable and value pair, like you have a variable x and it has a value of 2. Like what we write in R: x &lt;- 2, which means, we assign the value 2 to x. This is equivalent to a scalar. You can put more than one value in a variable, and then it will be equivalent to a vector, which is storing more than one scalar values: y &lt;- c(1,2,3,4,5,6) Here we have used the combine function c() to create a vector. Vector can hold different data-types individually, that means, one vector can hold only one type of data (numeric or character or logical etc). Just remember, if you want to hold multiple elements of same type (be it numeric values or characters), enclose them with the combine function (as above). Each of the components of the vector is called its Element. You can call or refer the elements individually or as a group using their positional index. The positional index starts from 1, which you can refer to as one-based indexing. For example, if you want to call or retrieve the first element of vector y, you can type in y[1]. Similarly, you can refer to the 4th element by typing in y[4]. If you want to refer to from 2nd to the 4th elements of y, you type in y[c(2,3,4)] or you can use y[2:4]. A useful tip - for sequential numbers, you can use a short-cut using colon sign in between the minimum and maximum values (inclusive) of the range. Like, for 1 to 100, you type in 1:100. 4.2.1.1 Short exercise on Vector Create a vector called my_vec and assign it with letters A b c D e. Then call third to fifth elements of the vector (on the Console). What happens if you call the sixth element of my_vec? 4.2.2 Matrix: A matrix is a two-dimensional (row and column) array of a single data type. Matrices are created using matrix() function. Think of you having 20 numbers, from 1 to 20 and you want to create a matrix with 4 rows and 5 columns. So you type in: myMatrix &lt;- matrix(data=1:20,nrow = 4,ncol = 5) myMatrix ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 5 9 13 17 ## [2,] 2 6 10 14 18 ## [3,] 3 7 11 15 19 ## [4,] 4 8 12 16 20 If you want to subset the matrix you can do it easily. Always remember, matrix is a m row by n column (m x n) structure which you define in R as [m,n] or [row, column]. If you want to choose the value in the first row and the first column (which also indicates the element numeric 1 in myMatrix), you type in myMatrix[1,1]. If you want to select first two rows and 2nd to 4th columns, you type in myMatrix[c(1,2), c(2,3,4)] or myMatrix[1:2, 2:4]. 4.2.2.1 Short exercise on Matrix Create a vector called english_alphabets with all 26 english alphabets.[Hint: letter() function returns all 26 english alphabets in lower-case] Create a matrix with 13 rows and 2 columns that accommodates all those alphabets. 4.2.3 Array: You can accommodate your data in more than 2 dimensions using an array. We will not cover it in this workshop. 4.2.4 Data frame: For you, data frame is the main data type that will have a vast utility in this course. You will import data in this format and manipulate data and export data in this format. Therefore, it’s imperative that you understand it very carefully. A data frame is a two-dimensional array. It is more general than a matrix and can contain different data types in it at the same time. However, each column contains a single data type (of course). The function to create a data frame is data.frame() and an easy way to create a data frame (using same-size vectors) is - myDataFrame &lt;- data.frame(vector1, vector2, vector3)) Let’s see the same data frame again and observe carefully how it is done. participant.ID=c(&quot;BMI1_001&quot;, &quot;BMI1_002&quot;, &quot;BMI1_003&quot;) Date=c(&quot;01/11/2021&quot;, &quot;01/11/2021&quot;, &quot;01/11/2021&quot;) weight.in.kg=c(55.5,45,75) height.in.cm=c(172,165,150) smoker=c(&quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;) Overall.health.condition=c(&quot;Intermediate&quot;, &quot;Good&quot;, &quot;Poor&quot;) myDataFrame &lt;- data.frame(participant.ID, Date, weight.in.kg, height.in.cm, smoker, Overall.health.condition) myDataFrame ## participant.ID Date weight.in.kg height.in.cm smoker ## 1 BMI1_001 01/11/2021 55.5 172 No ## 2 BMI1_002 01/11/2021 45.0 165 Yes ## 3 BMI1_003 01/11/2021 75.0 150 No ## Overall.health.condition ## 1 Intermediate ## 2 Good ## 3 Poor Remember, each of the vectors defining each column in the data frame has to be of equal length. Now, if you want to subset the data frame as you did from matrix, you can use the same technique. For example, if you want to know the weight and height of first two patients, you type in myDataFrame[c(1,2),c(3,4)]. Interestingly in the case of data frame, you can use the column names to do that, like - myDataFrame[c(1,2),c(&quot;weight.in.kg&quot;, &quot;height.in.cm&quot;)] Further more, there is another level of flexibility for selecting a column information by using dataframe$columnName notation as in our case myDataFrame$weight.in.kg. Now, you can inquire what are the column names by utilizing colnames() function and for the row names - rownames(). Here, in this case, we see there is no row name, rather they are indexed with 1 2 3 as character. rownames(myDataFrame) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; we don’t have row names yet, but we can assign them with row1, row2 and row2 by typing in rownames(myDataFrame) &lt;- c(&quot;row1&quot;, &quot;row2&quot;, &quot;row3&quot;) For simplicity, we will change the column names as well to simply column1, column2 etc - colnames(myDataFrame) &lt;- c(&quot;column1&quot;,&quot;column2&quot;,&quot;column3&quot;,&quot;column4&quot;,&quot;column5&quot;,&quot;column6&quot;) And, let’s see the current look of our data-frame - myDataFrame ## column1 column2 column3 column4 column5 column6 ## row1 BMI1_001 01/11/2021 55.5 172 No Intermediate ## row2 BMI1_002 01/11/2021 45.0 165 Yes Good ## row3 BMI1_003 01/11/2021 75.0 150 No Poor Now, if we want to subset using row and column names, we can type in - subDataFrame &lt;- myDataFrame[c(&quot;row1&quot;,&quot;row2&quot;),c(&quot;column2&quot;, &quot;column3&quot;)] subDataFrame ## column2 column3 ## row1 01/11/2021 55.5 ## row2 01/11/2021 45.0 Important nomenclature alert: In the realm of statistics, we refer a row as an observation and a column as a variable. In the realm of data analysts, they are records and fields, respectively. And, in the realm of Machine Learning, they are examples and attributes, respectively. 4.2.4.1 Short exercise on Data Frame Re-create the same data-frame with a different name (of your choice) with the following vectors - participant.ID=c(&quot;BMI1_001&quot;, &quot;BMI1_002&quot;, &quot;BMI1_003&quot;) Date=c(&quot;01/11/2021&quot;, &quot;01/11/2021&quot;, &quot;01/11/2021&quot;) weight.in.kg=c(55.5,45,75) height.in.cm=c(172,165,150) smoker=c(&quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;) Overall.health.condition=c(&quot;Intermediate&quot;, &quot;Good&quot;, &quot;Poor&quot;) Subset the columns weight.in.kg and smoker with - indexing and column names 4.2.5 List: In R, List is the (arguably) the most complex data structure which can hold different data types and data structures. Even, a list can hold another list. We will not cover this data structure in this workshop. 4.3 Import and export data For this course, we will limit ourselves to import data from our personal computers. Before that, go to the following link https://doi.org/10.5281/zenodo.6452121, download an excel file called excell_iris_data.xlsx and save to your working directory. Do the same for the csv file as well. The basic mode of reading a tabular dataset is the read.table() function. There are few others, like read.csv(), read.csv2(), read.ftable(), read.delim() etc. There are some basic parameter that you should be careful of - file = /path/to/the/file header = the default is set to TRUE, however, if the data doesn’t have a column name, set it to false. sep = for read.table(), it is set to white space. For read.csv(), it is a comma. For read.csv2(), it’s set to a semi-colon. For read.delim() or read.delim2(), it’s is a tab \"\\t\". row.names = if there’s a column for row name (usually the first column in the raw data), specify with the column number and later get rid of that column using say, data[,column_number] &lt;- NULL Now we will read the csv file - df_csv &lt;- read.csv(file = &quot;csv_iris_data.csv&quot;, row.names = 1) head(df_csv) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Now that we have read our data-frame and checked few rows from the top of it, we want to export it to our computer - write.csv(x = df_csv, file = &quot;My_output_df.csv&quot;) In the case of reading an excel file, either with .xls or .xlsx extension, we need to load a package called readxl. # install.packages(&quot;readxl&quot;) library(readxl) df_excel &lt;- read_excel(&#39;excell_iris_data.xlsx&#39;,sheet=&#39;Sheet1&#39;) head(df_excel) ## # A tibble: 6 × 5 ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Unfortunately, to write an excel file, we need another package - # install.packages(&quot;xlsx&quot;) library(xlsx) write.xlsx(x=df_excel, &quot;My_output_df.xlsx&quot;) 4.4 Manipulating data First thing, I would do to check after loading a data-frame to the R environment is checking its dimension, look at the top and bottom of the dataset, look at the structure and summary of the data by following set of commands - # check the dimension of the data dim(df_csv) ## [1] 150 5 # check the head or tail head(df_csv) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa tail(df_csv) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica # apply str() and summary() function str(df_csv) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... summary(df_csv) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## Length:150 ## Class :character ## Mode :character ## ## ## We have covered how to change the row or column names in the section Data frame Now we will see how to add new column or row to the data-frame. As we have seen that there are 150 rows in df_csv data-frame, therefore, we need a column that contains 150 data points. Let’s create a vector random_numbers that holds 150 random numbers - set.seed(seed = 123) random_numbers &lt;- round(rnorm(150),2) head(random_numbers) ## [1] -0.56 -0.23 1.56 0.07 0.13 1.72 length(random_numbers) ## [1] 150 Now, we will add this vector to the data-frame as a column - new_df &lt;- cbind(df_csv, random_numbers) # alternatively, #df_csv$random_number_column &lt;- random_numbers head(new_df) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species random_numbers ## 1 5.1 3.5 1.4 0.2 setosa -0.56 ## 2 4.9 3.0 1.4 0.2 setosa -0.23 ## 3 4.7 3.2 1.3 0.2 setosa 1.56 ## 4 4.6 3.1 1.5 0.2 setosa 0.07 ## 5 5.0 3.6 1.4 0.2 setosa 0.13 ## 6 5.4 3.9 1.7 0.4 setosa 1.72 Similarly, to add a new row to the current data-frame, let’s create another vector of 6 matched data-type elements to match the six columns in the new_df and add to the end of the data-frame - new_row &lt;- c(mean(new_df$Sepal.Length), mean(new_df$Sepal.Width), mean(new_df$Petal.Length), mean(new_df$Petal.Width), &quot;random_sp&quot;, mean(new_df$random_numbers) ) new_df2 &lt;- rbind(new_df, new_row) tail(new_df2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 146 6.7 3 5.2 2.3 virginica ## 147 6.3 2.5 5 1.9 virginica ## 148 6.5 3 5.2 2 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3 5.1 1.8 virginica ## 151 5.84333333333333 3.05733333333333 3.758 1.19933333333333 random_sp ## random_numbers ## 146 -0.53 ## 147 -1.46 ## 148 0.69 ## 149 2.1 ## 150 -1.29 ## 151 -0.0244666666666667 Now, we will touch on another important topic today - dealing with missing data. Missing data in R are represented by the symbol NA (not available) or impossible values (i.e. dividing by zero) are represented by the symbol NaN (not a number). Here we will deal with only NA which is the most common in day-to-day R. If we have a vector x which contains one or more NA values, we use is.na() function to inquire about NA values- x &lt;- c(1,2,NA,3,4,NA,5,6) is.na(x) ## [1] FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE any(is.na(x)) ## [1] TRUE The problem with the missing value(s) is that it hampers the simple operations, like - calculating the mean or sum etc - sum(x) ## [1] NA mean(x) ## [1] NA However, if you include a magic argument na.rm=TRUE, then the problem can be overcome and those operations can be performed on rest of the valid elements of the vector x - sum(x, na.rm = TRUE) ## [1] 21 mean(x, na.rm = TRUE) ## [1] 3.5 However, a clever way to handle the missing data points is to impute them, and a basic way of doing so is to take the mean of the rest of the data points, and replace the NA values with the mean - x[is.na(x)] &lt;- mean(x, na.rm = T) Obviously, there are more complex ways to impute the missing data, we will not cover those in this workshop. 4.4.0.1 Short exercise on manipulating data Please do the following steps - Download the file named “csv_iris_data_NA.csv” from https://doi.org/10.5281/zenodo.6452121 and import it on your R environment. Find out how many data points are missing. Impute the missing data points with the median value of the respective columns. Round the values of the imputed data points to 2 decimal points using the function round() What are the sums of each column (with numeric values)? "],["r-plots.html", "Chapter 5 R plots 5.1 Basic plots in R 5.2 Exercise", " Chapter 5 R plots 5.1 Basic plots in R Base R has a vast library of functions for plotting data for you to communicate your results to others. Even there are addition packages (i.e. ggplot) to plot complex and big data more efficiently. We will cover a few functions from the base R in this workshop. We will use a built-in data-frame (mtcars) that comes with R installation and we will use different columns to draw various graphs in this chapter. 5.1.1 scatter plot The first one we will learn is the scatter plot. You need two variables to draw such a plot and basically you look at the relationship between these two variables using scatter plot. The function to do it is simple: plot() x &lt;- mtcars$mpg y &lt;- mtcars$disp # the easiest way is to use plot() function plot(x,y) # You can input the data-points directly, but look at the axis labels plot(mtcars$mpg,mtcars$disp) # We can decorate the plot with different annotations - plot(x, y, xlab = &quot;miles per gallon&quot;, ylab = &quot;displacement&quot;, col=&quot;salmon&quot;, pch=19, #lty =2, #type = &quot;b&quot; ) 5.1.2 bar plot Another type of graph that we will cover today is the bar plot. If we want to know how many cars are there by the types of cylinders in the mtcars data, we use the table() function. Then we use the barplot() function to visualise the counts. # create a count table counts &lt;- table(mtcars$cyl) # plot the count table now. barplot(counts) # you can add some annotations as well barplot(counts, xlab = &quot;Number of cylinders in a car&quot;, ylab = &quot;Frequency&quot;, main = &quot;The number of cars by different cylinder types&quot;) 5.1.3 histogram The next type of graph we will cover is the Histogram. Histogram shows you the distribution of your data points. For example, you want to see the distribution of the displacement - # simply - hist(mtcars$wt) # you can change the break points of the histogram - hist(mtcars$wt, breaks = 20) # you can also add some annotations hist(mtcars$wt, breaks = 10, xlab = &quot;weight (1000 lbs)&quot;) abline(v=mean(mtcars$wt), col=&quot;red&quot;, lty=2, lwd=2) abline(v=median(mtcars$wt), col=&quot;blue&quot;, lty=3, lwd=2) 5.1.4 box plot The last type of plot, that we will cover today, is the box plot. It is important to understand the distribution of your data, and box plot is an alternative, but effecient way. boxplot For example, if you want to see the distribution of weights of the cars using box plot, the command is - boxplot(mtcars$wt, horizontal = T) Most importantly, you can look at the data compared to other variables as well. For example, if you and to look at the MPG values by car cylinder types, here is the code - boxplot(wt~cyl, data=mtcars, main=&quot;Car weight Data&quot;, xlab=&quot;Number of Cylinders in a car&quot;, ylab=&quot;Weight (1000 lbs) of the cars&quot;) 5.2 Exercise Plot the distribution of Sepal.Length and Petal.Length for different Species from the built-in iris data as shown below. Also add different colours [use col=c(\"red\",\"green\", \"blue\") argument in the boxplot() function] for each box. "],["control-flow-in-r.html", "Chapter 6 Control flow in R 6.1 Conditional execution 6.2 Loops 6.3 User defined functions", " Chapter 6 Control flow in R In this chapter, we will cover basically the so-called Control flow in R with the following topics - Conditional execution If-else statements Loops while loop for loop User defined funstions in R Functions without return Functions with return 6.1 Conditional execution 6.1.1 If-else statement The very basic conditional execution is the if and if-else statements. Let’s think you have a condition of do something (i.e. choose from a set of data-points or perform a mathematical operation) using R, you use if(condition){do something}. For example - x &lt;- 10 if(x == 10){ print(&quot;x is equal to 10&quot;) } ## [1] &quot;x is equal to 10&quot; If you want to add more twist to the condition, you bring in else statement - if(condition){do something} else{do the alternative}. Like here - x &lt;- 11 if(x == 10){ print(&quot;x is equal to 10&quot;) } else{ print(&quot;x is not equal to 10&quot;) } ## [1] &quot;x is not equal to 10&quot; You are not quiet content with the arguments here, you want to add more twists to the conditions, you add an intermediate else if condition - x &lt;- 11 if(x &gt; 20){ print(&quot;x is greater than 20&quot;) } else if(x &lt;= 20 &amp; x &gt;= 10){ print(&quot;x is between 10 and 20&quot;) } else{ print(&quot;x is less than 10&quot;) } ## [1] &quot;x is between 10 and 20&quot; 6.1.2 Short exercise You have a job to grade 20 math scripts (the score ranges from 0 to 10) from a class of yr 7 students according to the following scale - grade A: 8-10 grade B: 6-7 grade C: 4-5 grade F: 0-3 If a student scored 5, what’s the allocated grade? Write a set of conditional if else statements to answer the question. 6.2 Loops Loops are efficient ways to perform some mathematical operation iteratively, like - keep walking until you reach your destination (using while loop) or read each element of a vector, add one to it and do the same to the next (using for loop). 6.2.1 while loop The basic structure of while loop is while(condition){execute some action}, like - # Think logically before executing the following code snippet - # a &lt;- 10 # while(a &lt; 20){ # print(&quot;a is less than 20&quot;) # } There are two ways to tackle this - you can increase the value of a (in each iteration) - a &lt;- 10 while(a &lt; 20){ print(&quot;a is less than 20&quot;) a &lt;- a + 1 print(paste0(&quot;Because value of a is now &quot;, a)) } ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 11&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 12&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 13&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 14&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 15&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 16&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 17&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 18&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 19&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 20&quot; But, see, there’s a logical fault in the coding. Using break to break out of the loop a &lt;- 10 while(a &lt; 20){ a &lt;- a + 1 if(a &lt; 20){ print(&quot;a is less than 20&quot;) print(paste0(&quot;Because value of a is now &quot;, a)) }else{ break } } ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 11&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 12&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 13&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 14&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 15&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 16&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 17&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 18&quot; ## [1] &quot;a is less than 20&quot; ## [1] &quot;Because value of a is now 19&quot; Look carefully, though break is applied in the if-else statement, it affects on the loop that it is part of. 6.2.1.1 Short exercise on while loop You are giant and in every step you cover 15 meters. Your home is 100 km away from your current position. How many steps do you need to walk before you reach your home? 6.2.2 for loop Say, you have a vector b &lt;- c(\"a\",\"b\",\"c\",\"d\",\"e\") and you want to read the elements iteratively and then print them, what you can do is - b &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;) # looping through the contents of a vector directly for(i in b){ print(i) } ## [1] &quot;a&quot; ## [1] &quot;b&quot; ## [1] &quot;c&quot; ## [1] &quot;d&quot; ## [1] &quot;e&quot; # looping through the contents of a vector using indexing for(i in 1:length(b)){ print(b[i]) } ## [1] &quot;a&quot; ## [1] &quot;b&quot; ## [1] &quot;c&quot; ## [1] &quot;d&quot; ## [1] &quot;e&quot; Looping through sequential numbers (in some programming language you have to define the initial value and the increment in this line) - for(i in 1:5){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 For a bit better understanding - for(i in 1:5){ print(paste0(&quot;The current value of i is &quot;, i)) } ## [1] &quot;The current value of i is 1&quot; ## [1] &quot;The current value of i is 2&quot; ## [1] &quot;The current value of i is 3&quot; ## [1] &quot;The current value of i is 4&quot; ## [1] &quot;The current value of i is 5&quot; Look carefully at this piece of code to understand the nested loop and the change of the values of i and j for(i in 1:5){ for(j in 6:10){ print(paste(&quot;Now i is&quot;, i, &quot;and j is&quot;, j)) } } ## [1] &quot;Now i is 1 and j is 6&quot; ## [1] &quot;Now i is 1 and j is 7&quot; ## [1] &quot;Now i is 1 and j is 8&quot; ## [1] &quot;Now i is 1 and j is 9&quot; ## [1] &quot;Now i is 1 and j is 10&quot; ## [1] &quot;Now i is 2 and j is 6&quot; ## [1] &quot;Now i is 2 and j is 7&quot; ## [1] &quot;Now i is 2 and j is 8&quot; ## [1] &quot;Now i is 2 and j is 9&quot; ## [1] &quot;Now i is 2 and j is 10&quot; ## [1] &quot;Now i is 3 and j is 6&quot; ## [1] &quot;Now i is 3 and j is 7&quot; ## [1] &quot;Now i is 3 and j is 8&quot; ## [1] &quot;Now i is 3 and j is 9&quot; ## [1] &quot;Now i is 3 and j is 10&quot; ## [1] &quot;Now i is 4 and j is 6&quot; ## [1] &quot;Now i is 4 and j is 7&quot; ## [1] &quot;Now i is 4 and j is 8&quot; ## [1] &quot;Now i is 4 and j is 9&quot; ## [1] &quot;Now i is 4 and j is 10&quot; ## [1] &quot;Now i is 5 and j is 6&quot; ## [1] &quot;Now i is 5 and j is 7&quot; ## [1] &quot;Now i is 5 and j is 8&quot; ## [1] &quot;Now i is 5 and j is 9&quot; ## [1] &quot;Now i is 5 and j is 10&quot; Or, the following code snippet - my_matrix &lt;- matrix(1:18, nrow = 3, byrow = T) for(i in my_matrix){ print(i) } ## [1] 1 ## [1] 7 ## [1] 13 ## [1] 2 ## [1] 8 ## [1] 14 ## [1] 3 ## [1] 9 ## [1] 15 ## [1] 4 ## [1] 10 ## [1] 16 ## [1] 5 ## [1] 11 ## [1] 17 ## [1] 6 ## [1] 12 ## [1] 18 6.2.3 Short exercise on For loop But you do not want to print the content of my_matrix by column, rather you want to do it by row. How would you do it using nested for loops? 6.3 User defined functions By now, we have already seen some functions, like - print() and mean() that are built-in to your R environment. Sometimes they are not enough, you may need to perform some extra mathematical operations. Here comes the cool feature of R programming language, you can define your own functions. The basic structure of a fucntion is - function_name &lt;- function(input1, ..., inputN=default_value){ code to execute return() # if any } 6.3.1 Function without return() Let’s first look at a very simple function. This does not take any input as prerequisit and will not return any value - printOnly &lt;- function(){ print(&quot;hi&quot;) } printOnly() # remember to put a parentheses afterwards to call the function. ## [1] &quot;hi&quot; Now, define the same function with an input as argument (with a default value as well) - printOnly &lt;- function(name=&quot;David&quot;){ print(paste(&quot;hi&quot;, name)) } printOnly() ## [1] &quot;hi David&quot; # check out what happens if there is no default value assigned to the input argument and you call the function without any value. 6.3.2 Function with a return() So far, we have been, basically, printing something with the function. We actually want is to return the result. Now we will look into a function that returns a result and you can use it for later usage if you save it in a variable. Say, we want to add two numbers by a user defined function called add - add &lt;- function(num1, num2){ result &lt;- num1 + num2 return(result) } add(2,33) ## [1] 35 Now, we can assign the output of the function to a variable (say, result) - add &lt;- function(num1, num2){ result &lt;- num1 + num2 return(result) } result &lt;- add(2,33) Check that nothing is printed on the console as it returned some value and the value is now saved in the variable result. If you type in result in the console, now you can see the value. 6.3.3 Scoping There is another interesting feature you should keep in mind while scripting and defining your own function(s) - The scoping. The value of a variable can change inside or outside of your function depending of it’s position of definition and under what scope (either global or local) you call it - name &lt;- &quot;My name is David&quot; # global scope loc &lt;- &quot;I live in Edinburgh&quot; # global scope stay &lt;- function(loc){ print(name) loc &lt;- &quot;I live in London&quot; # redefining locally and work within the scope of the function print(loc) } stay(loc) ## [1] &quot;My name is David&quot; ## [1] &quot;I live in London&quot; # But, if you print &quot;loc&quot; now, see what happens...... print(loc) ## [1] &quot;I live in Edinburgh&quot; 6.3.3.1 Short exercise on function Create a function called div to divide two numbers. If the denominator is 0, then the function prints out “Please provide a non-zero denominator”. Now check these two expression div(2,0) and div(2,3) "],["resources.html", "Chapter 7 Resources 7.1 Useful resources 7.2 Post-workshop survey 7.3 SessionInfo", " Chapter 7 Resources 7.1 Useful resources RStudio: https://www.youtube.com/watch?v=FIrsOBy5k58 For quick help Quick-R: https://www.statmethods.net/ R-seek: https://rseek.org/ Active developments in R R-bloggers: https://www.r-bloggers.com/ Book: R in action: https://www.manning.com/books/r-in-action 7.2 Post-workshop survey It will be really nice if you could go to this link survey and answer the questions. It should take less than 5 minutes. 7.3 SessionInfo ============================================================================== &gt; sessionInfo() R version 4.1.0 (2021-05-18) Platform: x86_64-apple-darwin17.0 (64-bit) Running under: macOS Big Sur 11.6 Matrix products: default LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib locale: [1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8 attached base packages: [1] stats graphics grDevices utils datasets methods base loaded via a namespace (and not attached): [1] compiler_4.1.0 bookdown_0.25 fastmap_1.1.0 cli_3.2.0 htmltools_0.5.2 tools_4.1.0 [7] yaml_2.3.5 rmarkdown_2.13 knitr_1.38 xfun_0.30 digest_0.6.29 rlang_1.0.2 [13] evaluate_0.15 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
