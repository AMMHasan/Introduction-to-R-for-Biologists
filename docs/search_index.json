[["index.html", "Introduction to R for Biologists Chapter 1 Introduction 1.1 Definition 1.2 Mini history 1.3 Installing R and RStudio", " Introduction to R for Biologists Dr A M Mahedi Hasan 2022-03-30 Chapter 1 Introduction Course being desined for the MSc Students on UCL Cancer Institute. 1.1 Definition R is a programming language for statistical computing and graphics supported by the R Core Team and the R Foundation for Statistical Computing. - Wikipedia 1.2 Mini history R is an open-source implementation of the S programming language, which was designed for statistical analysis. S was created by Rick Becker, John Chambers, Doug Dunn, Jean McRae, and Judy Schilling at Bell Labs around 1976. In 1991, statisticians Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, started on an implementation of S which had become the R programming language over time. In 1995, statistician Martin Mächler convinced them to make R a free and open-source software. The first official release came in June 1995. and the first official “stable beta” version (v1.0) was released on 29 February 2000. R is supported by a huge community leevel contribution as it is upen source. 1.3 Installing R and RStudio We will be using RStudio, which is an Integrated Development Environment (IDE) of R. To my view, it is very handy working in RStudio environemnt, rather than using simply R. However, to use RStudio, we’ll need to install first the Base-R, and then RStudio software. Base-R is the basic software which contains the R programming language. Desktop version of both software are totally free and open source. 1.3.1 To Install R 1.3.1.1 For Mac users Open an internet browser and go to www.r-project.org. Click the “download R” link in the middle of the page under “Getting Started.” Select a CRAN location (a mirror site) and click the corresponding link. Click on the “Download R for MacOS” link at the top of the page. Click on an appropriate link under Latest releases. Save the .pkg file, double-click it to open, and follow the installation instructions. Now that R is installed, you need to download and install RStudio. 1.3.1.2 For Windows users 1.3.1.3 For Linux users 1.3.2 To Install RStudio 1.3.2.1 For Mac users Go to www.rstudio.com and click on the “Download” tab on the top Click on “Download” button under RStudio Desktop. Click on the version recommended for your system (i.e. the latest Mac version), save the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder. 1.3.2.2 For Windows users 1.3.2.3 For Linux users "],["who-am-i.html", "Chapter 2 Who am I?", " Chapter 2 Who am I? A M Mahedi Hasan, MRSB | AF-HEA Post-doctoral Research Associate (Computational Biology) Treatment Resistance Group UCL Cancer Institute 2nd Floor, Paul O’Gorman Building 72 Huntley Street, London WC1E 6DD "],["get-to-know-rstudio-interface.html", "Chapter 3 Get to know RStudio interface 3.1 RStudio Windows/Panels", " Chapter 3 Get to know RStudio interface RStudio is an integrated development environment (IDE) for R. 3.1 RStudio Windows/Panels Upon openning RStudio, you may see three windows or panels. However, it can be extended to four with the source panel opened (File &gt; New File &gt; R Script). You can reorder the windows / panels as per your wish. 3.1.1 Source window The source panel is where you create and edit your collection of codes in i.e. R Scripts. This is your script editor. You can save it in “.R” extension and reuse your codes later or in the case of sudden crush of your computer. As you type in your codes, make a habit of saving the codes (command + S or Ctrl + S) as you do with most of the text editors. However, you have to run the codes actively through the Console (coming next in the discussion). You can run the whole page of codes or a snippet of code from the source panel. There are many ways to run your codes from the Source panel through the Console. This could be with copy your codes and then paste on the Console and then hit enter. Or selectitng the code snippet that you wish to execute and clicking on the “Run” button on the top of the Source window. Alternatively, you can use the short-cut “Command + Enter” on Mac, or “Control + Enter” on Windows OS. 3.1.2 Environment / History (Connections / Build / Git etc) This panel contains several tabs and the number depends on whether you have installed/ loaded one or few packages. I will touch on only the Environment and the History tabs. The Environment tab of this panel shows you all the data objects (like vectors, dataframes etc) that you’ve created during the current R session . You can even double click on a loaded dataset on Environment tab and view in the Source panel, however, I won’t recommend this if the dataset is relatively sizable. The little broom on the top resets your environment and deletes the variables or data. The History tab keeps the commands that you used and can be reused by double click to execute, or shift + double click moves to the Source editor (R Script). 3.1.3 Console One can treat the Console Panel as the heart of RStudio. This is the default window in Base-R. You executes your R commands here actually. The Console works a is a prompt like a terminal in UNIX OS and let you check your codes interactively. Keep in mind that, when you turn off the RStudio, the Console deletes all the codes that you have executed in the current R session and when you reopen RStudio, you start with a fresh Console. 3.1.4 Files / Plots / Packages / Help I will go through these four tabls in this panel. However, sometimes you may have an aditional tab called Viewer. Files - Files tab showes you where you are and what are the contents of the directory, which is equivalent to folder in windows OS. You can also see the path of the working directory on the top. Let’s set your current directory - setwd(&quot;/Users/mahedi/Documents/Collaborations/UCL_CI/Introduction-to-R-for-Biologists&quot;) Plots - This tab shows the plots after generated. One cool and handy feature of RStudio is to have it integrated. You can go back and forth between plots using left and right arrow keys. Small broom resets your plots panel and deletes from the memory. You can either copy your plot to the clipboard or export as .jpeg or .pdf file. hist(rnorm(1000), main = &quot;Histogram of 1000 random numbers&quot;) Packages - R packages are bundles of functions generated by R users and released for others to use for free. Sometimes low weight data are embedded within. This list contains all the packages that are downloaded in this computer (or came as base packages with R). And the loaded packages are the ones with tick marks (checked). FYI, there are more than 19000 packages in CRAN, more than 2000 packages in Bioconductor. Help - Help tab provides the information regarding functions - detailed descriptions, usage, arguments etc. This utility can be summoned using the search box or by the ?function_name in the console. You can either type the name of a function in the search window, or use the code to search for a function with the name. "],["data-types-and-data-structures.html", "Chapter 4 Data types and data structures 4.1 Useful data types in R 4.2 Useful data structures in R 4.3 Manipulating data 4.4 Import and export data 4.5 Exercise", " Chapter 4 Data types and data structures 4.1 Useful data types in R There are different data types, but we will touch up on few but heavily used data types in this class. These are namely - 4.1.1 Numbers: Numbers can be an Integer, or it can be a floating number (decimal numbers) which is recognized as simple Numeric. The later category is continuous number, meaning it can take up any value within a given range. 4.1.2 Character: This type of data can be equivalent to categorical variable. These could be nominal (just names) or ordinal (names with hidden order) variables. 4.1.3 Logical: such as True or False. These can be the result of a boolean operation. Let’s see an example - participant.ID Date weight.in.kg height.in.cm smoker Overall.health.condition BMI1_001 01/11/2021 55.5 172 No Intermediate BMI1_002 01/11/2021 45.0 165 Yes Good BMI1_003 01/11/2021 75.0 150 No Poor Here in the table above, participant.ID, smoker, Overall.health.condition columns represent character data type. Of them, participant.ID and smoker columns contain nominal data, while the Overall.health.condition represents the ordinal data type. file:///Users/mahedi/Downloads/class2.nb.html Page 1 of 14 Basic statistics and exploratory data analysis in R for Biologists 05/02/2022, 14:20 The columns namely weight.in.kg and height.in.cm contain numeric and integer data type respectively. A very very important information: Categorical data (nominal or ordinal) in R are also called Factors. Sometimes, you need to detach this characteristic from your data and convert it to merely character type for the sake of data handling. Hide Overall.health.condition &lt;- factor(c(“Intermediate”, “Good”, “Poor”)) Overall.health.condition [1] Intermediate Good Poor Levels: Good Intermediate Poor Hide Overall.health.condition &lt;- factor(c(“Intermediate”, “Good”, “Poor”), ordered = F) Overall.health.condition [1] Intermediate Good Poor Levels: Good Intermediate Poor Hide Overall.health.condition &lt;- factor(c(“Intermediate”, “Good”, “Poor”), ordered = T) Overall.health.condition [1] Intermediate Good Poor Levels: Good &lt; Intermediate &lt; Poor Hide Overall.health.condition &lt;- factor(c(“Intermediate”, “Good”, “Poor”), ordered = T, levels = c(“Poor”, “Intermediate”, “Good”)) Overall.health.condition [1] Intermediate Good Poor Levels: Poor &lt; Intermediate &lt; Good There are also complex data types, date data types (The Date column in the above table contains date data type) etc, which we will not cover in this course. 4.2 Useful data structures in R 4.2.1 vector 4.2.2 matrix 4.2.3 dataframe There are few useful pre-defined data structures heavily used in R and there are user defined data structures as well (there are no limits in this case). We will discuss a few of the former - 4.2.4 Vector: Let’s first think of a variable and value pair, like you have a variable x and it has a value of 2 . Like what we write in R: x &lt;- 2 which means, we assign the value 2 to x . This is equivalent to a scalar. You can put more than one value in a variable, and then it will be equivalent to a vector: y &lt;- c(1,2,3,4,5,6) . Here we have used the combine function c() to create a vector. Vector can hold different data-types individually, that means, one vector can hold only one type of data (numeric or character or logical etc). Each of the component of the vector is called its Element. You can call or refer the elements individually or as a group using their positional index. The positional index starts from 1 (or you call it one-based indexing). For example, if you want to call the first element of y , you can refer to it by typing y[1] , or you can refer to the 4th element by typing y[4] . If you want to refer to from 2nd to the 4th elements of y , you type in y[c(2,3,4)] or you can use y[2:4] . 4.2.5 Matrix: A matrix is a two-dimensional (row and column) array of same data type. Matrices are created using matrix() function. Think of you have 20 numbers, from 1 to 20. You want to create a matrix with 4 rows and 5 columns. So you type in: Hide myMatrix &lt;- matrix(data=1:20,nrow = 4,ncol = 5) myMatrix [,1] [,2] [,3] [,4] [,5] [1,] 1 5 9 13 17 [2,] 2 6 10 14 18 [3,] 3 7 11 15 19 [4,] 4 8 12 16 20 If you want to subset the matrix you can do it easily. Always remember, matrix is a m row by n column (m x n) structure which you define in R as [m,n] or [row, column] . If you want to choose the first row and first column (which also indicates the element 1 in myMatrix), you type in myMatrix[1,1] . If you want to select first 2 rows and 2nd to 4th columns, you type in myMatrix[c(1,2), c(2,3,4)] or myMatrix[c(1:2), c(2:4)] . Array: You can accommodate your data in more than 2 dimensions using an array. We will not cover it in this course. ### Data frame: For you, data frame is the main data type that will have a huge utility in this course. You will import data in this format and manipulate data in this format and export data in this format. Therefore, it’s imperative that you understand it very carefully. A data frame is again a two dimensional array. It is more general than a matrix and can contain different data types in it. However, each column contains a single data type (of course). The function to create a data frame is data.frame() and an easy way to create a data frame is myDataFrame &lt;- data.frame(column1, column2, column3)) file:///Users/mahedi/Downloads/class2.nb.html Page 3 of 14 Basic statistics and exploratory data analysis in R for Biologists 05/02/2022, 14:20 Let’s see the same data frame again and observe carefully how it is done. Hide myDataFrame &lt;- data.frame( participant.ID=c(“BMI1_001”, “BMI1_002”, “BMI1_003”), Date=c(“01/11/2021”, “01/11/2021”, “01/11/2021”), weight.in.kg=c(55.5,45,75), “height in cm”=c(172,165,150), smoker=c(“No”, “Yes”, “No”), Overall.health.condition=c(“Intermediate”, “Good”, “Poor”) ) myDataFrame participant.ID Date weight.in.kg height.in.cm smo… Overall.health.condition BMI1_001 01/11/2021 55.5 172 No Intermediate BMI1_002 01/11/2021 45.0 165 Yes Good BMI1_003 01/11/2021 75.0 150 No Poor 3 rows Remember, each of the vector defining each column in the data frame has to be of same length. Now, if you want to subset the data frame as you did from matrix, you can use the same technique. For example, if you want to know the weight and height of first two patients, you type in myDataFrame[c(1,2),c(3,4)] . Interestingly in the case of data frame, you can use the column names to do that, like - myDataFrame[c(1,2),c(“weight.in.kg”, “height.in.cm”)] Further more, there is another level of flexibility for selecting a column information by using a $ notation as in myDataFrame$weight.in.kg . Now, you can inquire what are the column names by utilizing colnames() function and for the row names - rownames() , of course. Here, in this case, we don’t have row names yet, but we can assign them with row1 , row2 and row2 by typing in rownames(myDataFrame) &lt;- c(“row1”, “row2”, “row3”) Now, if we want to subset using row and column names, we can type in - myDataFrame[c(“row1”,“row2”),c(“weight.in.kg”, “height.in.cm”)] Important nomenclature alert: In the realm of statistics, we refer a row as an observation and a column as a variable. In the realm of data analysts, they are records and fields, respectively. And, in the realm of Machine Learning, they are examples and attributes, respectively List: In R, List is the (arguably) the most complex data structure which can hold different data types file:///Users/mahedi/Downloads/class2.nb.html Page 4 of 14 Basic statistics and exploratory data analysis in R for Biologists 05/02/2022, 14:20 and data structures. Even, a list can hold another list. We will not cover this data structure in this course. 4.3 Manipulating data 4.4 Import and export data Import and export data: For this course, we will limit ourselves to import data from our personal computers. I have sent two different files to you - one with .txt extension and another with .csv . First we will deal with our example_data.txt file and to import it, we will use read.table() function. And for example_data.csv file, we will use read.csv() function. For exporting the file, we will use either write.table() function or write.csv() function. To deal with .xls or .xlsx files, we will touch this topic when we discuss how to load packages, later. 4.5 Exercise "],["r-plot.html", "Chapter 5 R plot 5.1 Basic plots in R 5.2 Exercise", " Chapter 5 R plot 5.1 Basic plots in R 5.1.1 scatter 5.1.2 bar plot 5.1.3 histogram 5.1.4 box plot 5.2 Exercise "],["r-programming-and-r-functions-for-the-beginners.html", "Chapter 6 R programming and R functions for the beginners 6.1 Control flow in R 6.2 User-defined functions in R 6.3 Exercise", " Chapter 6 R programming and R functions for the beginners 6.1 Control flow in R 6.1.1 If-else 6.1.2 while 6.1.3 for loop 6.2 User-defined functions in R 6.3 Exercise "],["references.html", "Chapter 7 References", " Chapter 7 References RStudio: https://www.youtube.com/watch?v=FIrsOBy5k58 Quick-R: for help R-seek: for help R-bloggers: active developments in R Book: R in action "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
